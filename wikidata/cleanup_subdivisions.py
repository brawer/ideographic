# coding: utf-8
from __future__ import unicode_literals
import codecs

PREFIX = [
    'Canton of ',
    'Canton de ',
    'Canton d\'',
    'Cantone di ',
    'Cantó de ',
    'Canton o ',
    'Cantonul ',
    'District of ',
    'Distrikt ',
    'Kreis ',
    'Bang ',
    'كانتون ',
    'ایالت ',
    'کینٹن ',
    'cantó de ',
    'Cantó del ',
    'Cantón d\'',
    'Cantón de ',
    'canton d\'',
    'Cànton de ',
    'canton de ',
    'canton du ',
    'Cànton du ',
    'Cantón de ',
    'Cantuni di ',
    'Kantono ',
    'Kantoo ',
    'Kantuu ',
    'Kantoni ',
    'Kantonen ',
    'Kanton ya ',
    'Kanton ',
    'Caton ',
    'Canton ',
    'Cantone ',
    'cantão ',
    'Jimbo la ',
    'Κάντον οφ ',
    'Καντόνι του ',
    'Chantun ',
    'Кантон ',
    'кантон ',
    'State of ',
    'Autonome Republik ',
    'Autonomní provincie ',
    'Provincia autonoma de ',
    'Autonomna pokrajina ',
    'Província autónoma de ',
    'Provinca Autonome e ',
    'Provinge autonome de ',
    'province autonome de ',
    'provincia autonoma di ',
    'Província autónoma de ',
    'Pruvincia autonoma \'e ',
    'Provincia Autonomă ',
    'Pruvincia autonuma de ',
    'Provinsi otonom ',
    'Província d\'',
    'Provincia d\'',
    'province d\'',
    'Province of ',
    'Provinsa de ',
    'Pruvincia \'e ',
    'Provincia ëd ',
    'Província de ',
    'Provincia di ',
    'Pruvincia di ',
    'Provinsia de ',
    'Provincia de ',
    'Provinge de ',
    'Provinca e ',
    'Province o ',
    'Provinca e ',
    'Province de ',
    'Provinge de ',
    'Pruvincia de ',
    'provincia di ',
    'província de ',
    'Провінція ',
    'Prowincja ',
    'Provënz ',
    'provincia ',
    'Província d\'',
    'province de ',
    'província de ',
    'Provinsen ',
    'provinsen ',
    'Provincia ',
    'Provinco de ',
    'Provinco ',
    'Provinsi ',
    'Provinz ',
    'Propinsi ',
    'Proviñs ',
    'Provincie ',
    'provincia ',
    'правінцыя ',
    'Правінцыя ',
    'Провинција ',
    'Mkoa wa ',
    'Wilayah Autonomi ',
    'Wilayah ',
    'Talaith ',
    'استان ',
    'Επαρχία του ',
    'Горад ',
    'Metropolitan Borough of ',
    'Municipio metropolitano de ',
    'Districte de ',
    'Distrito de ',
    'District de ',
    'Dipartiment ëd l\'',
    'Dipartiment ëd la ',
    'Dipartiment dël ',
    'Département ',
    'Departamento ',
    'Departimento ',
    'Departementet ',
    'Departement ',
    'Департаменти ',
    'Департаменти ',
    'Дэпартамент ',
    'Okrug ',
    'Vilojati ',
    'Вилояти ',
    'Präfektur ',
    'Prefecture of ',
    'Estado de ',
    'Gespanschaft ',
    'Woiwodschaft ',
    'Region ',
    'Région ',
    'Región de ',
    'Județ de ',
    'Condado de ',
    'Autonomes Gebiet ',
    'Territori de ',
    'Regne de l\'',
    'County of ',
    'Condáu de ',
    'Região de ',
    'Comtat de ',
    'County ',
    'Territoire de ',
    'Territorio de ',
    'Tèrritouèro de ',
    'Тэрыторыя ',
    'Έδαφος του ',
    'テリトワール・ド・',
    'Lãnh thổ ',
    'Collectivitat de ',
    'Collectivity o ',
    'Ìkólẹ̀jọ ',
    'Рэгіён ',
    'Штат ',
    'nin ',
    'district métropolitain de ',
    'Royal Borough of ',
    'City and Borough of ',
    'City of ',
    'Πόλη του ',
    'Oblast\' de l\'',
    'Oblast\' dell\'',
    'Oblast de ',
    'Óblast de ',
    'Regiunea ',
    'Oblasć ',
    'Oblast d\'',
    'Oblast ',
    'Comunôtât ôtonoma de ',
    'Communitate Autonome ',
    'Kumuniezh Emren ',
    'Comunidá de ',
    'Comunitat de ',
    'Comunidad de ',
    'Comunidade de ',
    'Communitate ',
    'Autonome Gemeinschaft ',
    'Community of ',
    'Kumuniezh ',
    'comunità di ',
    'Comhphobal ',
    'communauté de ',
    'Comunidá de ',
    'Comunidat de ',
    'Emren ',
    'Zajednica ',
    'Κοινότητα της ',
    'Autonoma ',
    'Regionen ',
    'Comunautat autonòma de ',
    'Pamayanan ng ',
    'Prefectura de ',
    'Préféktur ',
    'Prefektur ',
    'prefettura di ',
    'prefettura ',
    'Prefectura ',
    'Gubernio ',
    'préfecture de ',
    'Maoracht ',
    'Прэфектура ',
    'Prefektura ',
    'Νομαρχία ',
    'Префектура ',
    'Prepektura ng ',
    'Prefekturai ',
    'Prefectura ',
    'prefektura ',
    'Префектураи ',
    'Префектура ',
    'Lalawigan ng ',
    'Provinsa ëd ',
    'Lalawigan ng ',
    'Επαρχία ',
    'Tetãvore ',
]

SUFFIX = [
    'ko probintzia',
    ' (država)',
    ' (estado)',
    ' (pokrajina)',
    ' estatua',
    ' osariik',
    ' ili',
    ' megye',
    ' probintzia autonomoa',
    ' provincija',
    ' provints',
    ' provincėjė',
    ' provins',
    ' wamani',
    '\'i departemang',
    ' departemang',
    ' Tetãmini',
    'n maakunta',
    ' province',
    ' jisk\'a',
    ' eyaleti',
    ' Province',
    ' probintzia',
    ' Séng',
    ' Shitati',
    ' suyu',
    '-sén',
    ' Chiu',
    ' аймаг',
    ' tartomány',
    '島',
    '地域圏',
    '準州',
    '州',
    '県',
    ' 주',
    ' Istadu',
    ' вилаяте',
    '\' kanton',
    ' kanton',
    ' kantons',
    ' kantonas',
    ' kantonamendua',
    ' Herrialdea',
    ' city council district',
    ' District Council',
    ' District',
    ' district',
    'ская область',
    'ська область',
    'ска област',
    'ska oblast',
    'ská oblasť',
    ' oblasta',
    ' oblast',
    ' Oblast',
    ' Oblastı',
    ' өлкәсе',
    ' viloyati',
    ' oblasť',
    ' Nutanut',
    ' eanangoddi',
    ' autonomní společenství',
    ' společenství',
    ' Erkidegoa',
    ' autonoomne piirkond',
    ' Regiono',
    ' Comunitas',
    '-Distrikt',
    ' Prefektuur',
    '-gâing',
    '-præfekturet',
    ' prefektúra',
    ' prefektūra',
    '-koān',
    ' prefektur',
    'n prefektuuri',
    ' Prefecture',
    ' prefektuur',
    ' Prefectur',
    ' prefektuvra',
    ' پریفیکچر',
]

def strip(name):
    name = name.split('(')[0].strip()
    for p in PREFIX:
        if name.startswith(p):
            name = name[len(p):]
            break
    for s in SUFFIX:
        if name.endswith(s):
            name = name[:-len(s)]
    return name

n = 0
def read(path):
    names = {}
    for line in codecs.open(path, 'r', 'utf-8'):
        code, qid, mid, lang, name = line.strip().split('\t')
        print '\t'.join((code, lang, strip(name))).encode('utf-8')
        names.setdefault(code, {})[lang] = name
        if ++n > 1000:
            break
    return names

read('wikidata-subdivisions-20170622.txt')
